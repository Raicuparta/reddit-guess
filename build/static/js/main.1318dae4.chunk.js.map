{"version":3,"sources":["index.js"],"names":["decode","string","replace","useFetchPosts","_useState","useState","_useState2","Object","_Users_raicuparta_work_reddit_mixed_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","posts","setPosts","useEffect","length","subReddit","URL","window","location","href","searchParams","get","console","log","fetch","then","response","ok","json","results","data","children","map","post","fetchPosts","array","a","Math","random","sort","b","title","url","preview","images","variant","variants","gif","source","id","useCounter","_useState3","_useState4","counter","setCounter","Choices","_ref","choices","answer","onChoiceClick","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","Fragment","className","key","alt","src","onClick","End","_ref2","onRestartClick","Start","ReactDOM","render","_useFetchPosts","_useFetchPosts2","resetPosts","_useCounter","_useCounter2","incCounter","resetCounter","_useCounter3","_useCounter4","points","incPoints","resetPoints","slice","round","event","target","document","getElementById"],"mappings":"iMAOMA,SAAS,SAAAC,GAAM,OACnBA,EAAOC,QAAQ,SAAU,OAiBrBC,EAAgB,WAAM,IAAAC,EACAC,mBAAS,IADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACZI,EADYJ,EAAA,GAkC1B,OA3BAK,oBAAU,WACR,IAAIF,EAAMG,OAAV,CAIA,IACMC,EADM,IAAIC,IAAIC,OAAOC,SAASC,MACdC,aAAaC,IAAI,QAlCjB,iBAmCtBC,QAAQC,IAAI,8BAxBG,SAAAR,GAAS,OAC1BE,OAAOO,MACL,4BACAT,EACA,sCAGCU,KAAK,SAAAC,GAAQ,OAAIA,EAASC,IAAMD,EAASE,SACzCH,KAAK,SAAAI,GAAO,OAAIA,EAAQC,KAAKC,SAASC,IAAI,SAAAC,GAAI,OAAIA,EAAKH,SAiBxDI,CAAWnB,GAAWU,KAAK,SAAAI,GA9BV,IAAAM,EA+BfvB,GA/BeuB,EA+BON,EA/BEM,EAC3BH,IAAI,SAAAI,GAAC,MAAI,CAACC,KAAKC,SAAUF,KACzBG,KAAK,SAACH,EAAGI,GAAJ,OAAUJ,EAAE,GAAKI,EAAE,KACxBR,IAAI,SAAAI,GAAC,OAAIA,EAAE,MA4BuBJ,IAAI,SAAAC,GACjC,IAAMQ,EAAQvC,EAAO+B,EAAKQ,OACtBC,EAAMxC,EAAO+B,EAAKS,KACtB,GAAIT,EAAKU,QAAS,CAChB,IAAMA,EAAUV,EAAKU,QAAQC,OAAO,GAC9BC,EAAUF,EAAQG,SAASC,KAAOJ,EACxCD,EAAMxC,EAAO2C,EAAQG,OAAON,KAG9B,MAAO,CACLO,GAAIhB,EAAKgB,GACTR,QACAC,eAMD,CAAC/B,EA/BW,WACjBC,EAAS,OAiCPsC,EAAa,WAAM,IAAAC,EACO5C,mBAAS,GADhB6C,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GAChBE,EADgBD,EAAA,GACPE,EADOF,EAAA,GAMvB,MAAO,CAACC,EAFI,kBAAMC,EAAWD,EAAU,IADzB,kBAAMC,EAAW,MAM3BC,EAAU,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,OAAQC,EAApBH,EAAoBG,cAApB,OACdC,EAAAxB,EAAAyB,cAAAD,EAAAxB,EAAA0B,SAAA,KACEF,EAAAxB,EAAAyB,cAAA,OAAKE,UAAU,MAAf,WAEEH,EAAAxB,EAAAyB,cAAA,OAAKE,UAAU,SACZN,EAAQC,GAAQjB,OAHrB,KAOAmB,EAAAxB,EAAAyB,cAAA,OAAKE,UAAU,mBACZN,EAAQzB,IAAI,SAAAC,GAAI,OACf2B,EAAAxB,EAAAyB,cAAA,OACEE,UAAU,gBACVC,IAAK/B,EAAKgB,IAEVW,EAAAxB,EAAAyB,cAAA,OACEE,UAAU,mBACVE,IAAI,GACJC,IAAKjC,EAAKS,MAEZkB,EAAAxB,EAAAyB,cAAA,OACEM,QAASR,EACTI,UAAU,kBACVE,IAAI,GACJC,IAAKjC,EAAKS,YAQhB0B,EAAM,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,eAAH,OACVV,EAAAxB,EAAAyB,cAAA,OAAKE,UAAU,MACbH,EAAAxB,EAAAyB,cAAA,UACEE,UAAU,0BACVI,QAASG,GAFX,aASEC,EAAQ,kBACZX,EAAAxB,EAAAyB,cAAA,OAAKE,UAAU,MAAf,eAmDFS,IAASC,OAAOb,EAAAxB,EAAAyB,cA9CJ,WAAM,IAAAa,EACYrE,IADZsE,EAAAlE,OAAAC,EAAA,EAAAD,CAAAiE,EAAA,GACT/D,EADSgE,EAAA,GACFC,EADED,EAAA,GAAAE,EAE4B3B,IAF5B4B,EAAArE,OAAAC,EAAA,EAAAD,CAAAoE,EAAA,GAETxB,EAFSyB,EAAA,GAEAC,EAFAD,EAAA,GAEYE,EAFZF,EAAA,GAAAG,EAGyB/B,IAHzBgC,EAAAzE,OAAAC,EAAA,EAAAD,CAAAwE,EAAA,GAGTE,EAHSD,EAAA,GAGDE,EAHCF,EAAA,GAGUG,EAHVH,EAAA,GAKVzB,EAAU9C,EAAM2E,MAAgB,EAAVjC,EAAuB,EAAVA,EAAc,GACjDK,EAASrB,KAAKkD,MAAMlD,KAAKC,UAgB/B,OACEsB,EAAAxB,EAAAyB,cAAA,OAAKE,UAAU,OAEVN,EAAQ3C,OAAS,EAChB8C,EAAAxB,EAAAyB,cAACN,EAAD,CACEE,QAASA,EACTC,OAAQA,EACRC,cArBgB,SAAC6B,GACDA,EAAMC,OAAOvB,MAAQT,EAAQC,GAAQhB,KAE3D0C,IAEFL,OAmBM1B,EACEO,EAAAxB,EAAAyB,cAACO,EAAD,CAAKE,eAjBY,SAACkB,GAC1BR,IACAK,IACAT,OAgBQhB,EAAAxB,EAAAyB,cAACU,EAAD,MAINX,EAAAxB,EAAAyB,cAAA,OAAKE,UAAU,MAAf,WACWoB,EADX,MACsB9B,KAMZ,MAASqC,SAASC,eAAe","file":"static/js/main.1318dae4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nconst DEFAULT_SUBREDDIT = 'MixedRaceGirls'\nconst POST_LIMIT = 100\n\nconst decode = string =>\n  string.replace(/&amp;/g, '&')\n\nconst shuffleArray = array => array\n  .map(a => [Math.random(), a])\n  .sort((a, b) => a[0] - b[0])\n  .map(a => a[1])\n\nconst fetchPosts = subReddit =>\n  window.fetch(\n    'https://www.reddit.com/r/' +\n    subReddit +\n    '/top.json?sort=top&t=all&limit=' +\n    POST_LIMIT\n  )\n    .then(response => response.ok && response.json())\n    .then(results => results.data.children.map(post => post.data))\n\nconst useFetchPosts = () => {\n  const [posts, setPosts] = useState([])\n\n  const resetPosts = () => {\n    setPosts([])\n  }\n\n  useEffect(() => {\n    if (posts.length) {\n      return\n    }\n\n    const url = new URL(window.location.href)\n    const subReddit = url.searchParams.get('sub') || DEFAULT_SUBREDDIT\n    console.log('Fetching posts from Reddit')\n    fetchPosts(subReddit).then(results => {\n      setPosts(shuffleArray(results).map(post => {\n        const title = decode(post.title)\n        let url = decode(post.url)\n        if (post.preview) {\n          const preview = post.preview.images[0]\n          const variant = preview.variants.gif || preview\n          url = decode(variant.source.url)\n        }\n\n        return {\n          id: post.id,\n          title,\n          url\n        }\n      }))\n    })\n  })\n\n  return [posts, resetPosts]\n}\n\nconst useCounter = () => {\n  const [counter, setCounter] = useState(0)\n\n  const reset = () => setCounter(0)\n  const inc = () => setCounter(counter + 1)\n\n  return [counter, inc, reset]\n}\n\nconst Choices = ({ choices, answer, onChoiceClick }) => (\n  <>\n    <div className='ui'>\n      Which is\n      <div className='title'>\n        {choices[answer].title}\n      </div>\n      ?\n    </div>\n    <div className='choices-wrapper'>\n      {choices.map(post => (\n        <div\n          className='image-wrapper'\n          key={post.id}\n        >\n          <img\n            className='background-image'\n            alt=''\n            src={post.url}\n          />\n          <img\n            onClick={onChoiceClick}\n            className='image touchable'\n            alt=''\n            src={post.url}\n          />\n        </div>\n      ))}\n    </div>\n  </>\n)\n\nconst End = ({ onRestartClick }) => (\n  <div className='ui'>\n    <button\n      className='restartButton touchable'\n      onClick={onRestartClick}\n    >\n      Restart\n    </button>\n  </div>\n)\n\nconst Start = () => (\n  <div className='ui'>\n    Loading...\n  </div>\n)\n\nconst App = () => {\n  const [posts, resetPosts] = useFetchPosts()\n  const [counter, incCounter, resetCounter] = useCounter()\n  const [points, incPoints, resetPoints] = useCounter()\n\n  const choices = posts.slice(counter * 2, counter * 2 + 2)\n  const answer = Math.round(Math.random())\n\n  const handleChoiceClick = (event) => {\n    const isCorrectAnswer = event.target.src === choices[answer].url\n    if (isCorrectAnswer) {\n      incPoints()\n    }\n    incCounter()\n  }\n\n  const handleRestartClick = (event) => {\n    resetCounter()\n    resetPoints()\n    resetPosts()\n  }\n\n  return (\n    <div className='app'>\n      {\n        (choices.length > 1) ? (\n          <Choices\n            choices={choices}\n            answer={answer}\n            onChoiceClick={handleChoiceClick}\n          />\n        ) : (\n          counter ? (\n            <End onRestartClick={handleRestartClick} />\n          ) : (\n            <Start />\n          )\n        )\n      }\n      <div className='ui'>\n        Points: {points} / {counter}\n      </div>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}